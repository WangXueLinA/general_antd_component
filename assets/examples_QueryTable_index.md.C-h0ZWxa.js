import{$ as s,S as a,X as e,aI as i}from"./chunks/framework.B2GUFrNN.js";const u=JSON.parse('{"title":"QueryTable","description":"","frontmatter":{},"headers":[],"relativePath":"examples/QueryTable/index.md","filePath":"examples/QueryTable/index.md"}'),n={name:"examples/QueryTable/index.md"};function d(l,t,r,p,o,h){return e(),a("div",null,t[0]||(t[0]=[i(`<h1 id="querytable" tabindex="-1">QueryTable <a class="header-anchor" href="#querytable" aria-label="Permalink to &quot;QueryTable&quot;">​</a></h1><table tabindex="0"><thead><tr><th>Prop 名称</th><th>类型</th><th>是否必填</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>topActionButtons</td><td>Array&lt;ButtonProps &amp; { label: string; key?: string }&gt;</td><td>否</td><td>undefined</td><td>顶部操作按钮数组，每个按钮对象包含 ant-design-vue 的 ButtonProps、label（按钮显示文本）和可选的 key（唯一标识）</td></tr><tr><td>bottomActionButtons</td><td>Array&lt;ButtonProps &amp; { label: string; key?: string }&gt;</td><td>否</td><td>undefined</td><td>同 topActionButtons</td></tr><tr><td>formProps</td><td>FormProps</td><td>否</td><td><code>{ columns: [], defaultData: {}, otherColumns: [] }</code></td><td>搜索表单的配置信息，包含 columns（Form 的 json 配置）、defaultData（表单默认数据）、layout（表单布局方式）、labelCol（表单标签列布局配置）、wrapperCol（表单控件列布局配置）和 otherColumns（表单操作区其他按钮配置数组）</td></tr><tr><td>tableProps</td><td>TableProps</td><td>否</td><td><code>{ columns: [], pagination: { current: 1, pageSize: 10, total: 0, showSizeChanger: true } }</code></td><td>表格的配置信息，包含 columns（表格列配置）和 pagination（分页配置）等 ant-design-vue 的 TableProps 属性</td></tr><tr><td>requestApi</td><td><code>(params: Record&lt;string, any&gt;) =&gt; Promise&lt;any&gt;</code></td><td>是</td><td>无</td><td>用于获取表格数据的异步请求函数，接收一个包含请求参数的对象，返回一个 Promise</td></tr><tr><td>formatParams</td><td><code>(params: Record&lt;string, any&gt;) =&gt; Record&lt;string, any&gt;</code></td><td>否</td><td><code>() =&gt; ({})</code></td><td>用于格式化请求参数的函数，接收一个包含原始请求参数的对象，返回一个格式化后的请求参数对象</td></tr></tbody></table><p>QueryTable/useQueryTable 组合式函数，其主要功能是创建 QueryTable 组件的实例，并返回一些用于操作该组件的方法。可根据需要自己添加暴露在实例上的方法</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">QueryTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   import { useQueryTable } from &#39;@/components/QueryTable/useQueryTable&#39;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   const { QueryTable, handleRefresh } = useQueryTable()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,4)]))}const c=s(n,[["render",d]]);export{u as __pageData,c as default};
